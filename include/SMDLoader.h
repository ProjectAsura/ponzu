//-----------------------------------------------------------------------------
// File : SMDLoader.h
// Desc : Salty Model Data Format Loader.
// Copyright(c) Project Asura. All righ reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <vector>
#include <fnd/asdxMath.h>


///////////////////////////////////////////////////////////////////////////////
// SMD_MATERIAL_TYPE enum
///////////////////////////////////////////////////////////////////////////////
enum SMD_MATERIAL_TYPE
{
    SMD_MATERIAL_TYPE_MATTE = 0,
    SMD_MATERIAL_TYPE_MIRROR,
    SMD_MATERIAL_TYPE_DIELECTRIC,
    SMD_MATERIAL_TYPE_GLOSSY,
    SMD_MATERILA_TYPE_PLASTIC,
};

///////////////////////////////////////////////////////////////////////////////
// VertexSMD structure
///////////////////////////////////////////////////////////////////////////////
struct VertexSMD
{
    asdx::Vector3   Position;
    asdx::Vector3   Normal;
    asdx::Vector2   TexCoord;
};

///////////////////////////////////////////////////////////////////////////////
// MatteSMD structure
///////////////////////////////////////////////////////////////////////////////
struct MatteSMD
{
    asdx::Vector3   Color;
    asdx::Vector3   Emissive;
    int             ColorMap;
};

///////////////////////////////////////////////////////////////////////////////
// MirrorSMD structure
///////////////////////////////////////////////////////////////////////////////
struct MirrorSMD
{
    asdx::Vector3   Color;
    asdx::Vector3   Emissive;
    int             ColorMap;
};

///////////////////////////////////////////////////////////////////////////////
// DielectricSMD structure
///////////////////////////////////////////////////////////////////////////////
struct DielectricSMD
{
    asdx::Vector3   Color;
    float           Ior;
    asdx::Vector3   Emissive;
    int             ColorMap;
};

///////////////////////////////////////////////////////////////////////////////
// GlossySMD structure
///////////////////////////////////////////////////////////////////////////////
struct GlossySMD
{
    asdx::Vector3   Color;
    float           Shininess;
    asdx::Vector3   Emissive;
    int             ColorMap;
};

///////////////////////////////////////////////////////////////////////////////
// PlasticsSMD structure
///////////////////////////////////////////////////////////////////////////////
struct PlasticSMD
{
    asdx::Vector3   Diffuse;
    asdx::Vector3   Specular;
    float           Shininess;
    asdx::Vector3   Emissive;
    int             DiffuseMap;
    int             SpecularMap;
};

///////////////////////////////////////////////////////////////////////////////
// TextureSMD structure
///////////////////////////////////////////////////////////////////////////////
struct TextureSMD
{
    std::string     Path;
};

///////////////////////////////////////////////////////////////////////////////
// MaterialSMD structure
///////////////////////////////////////////////////////////////////////////////
struct MaterialSMD
{
    SMD_MATERIAL_TYPE   Type;
    union Parameter
    {
        MatteSMD        Matte;
        MirrorSMD       Mirror;
        DielectricSMD   Dielectrics;
        GlossySMD       Glossy;
        PlasticSMD      Plastic;
    } Param = {};
};

///////////////////////////////////////////////////////////////////////////////
// SubsetSMD structure
///////////////////////////////////////////////////////////////////////////////
struct SubsetSMD
{
    uint32_t    IndexOffset;
    uint32_t    IndexCount;
    int         MaterialId;
};

///////////////////////////////////////////////////////////////////////////////
// ModelSMD structure
///////////////////////////////////////////////////////////////////////////////
struct ModelSMD
{
    std::vector<TextureSMD>     Textures;
    std::vector<MaterialSMD>    Materials;
    std::vector<VertexSMD>      Vertices;
    std::vector<SubsetSMD>      Subsets;
};

///////////////////////////////////////////////////////////////////////////////
// SMDLoader class
///////////////////////////////////////////////////////////////////////////////
class SMDLoader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    SMDLoader() = default;

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~SMDLoader() = default;

    //-------------------------------------------------------------------------
    //! @brief      ファイルをロードします.
    //! 
    //! @param[in]      path        ファイルパスです.
    //! @param[out]     model       モデルの格納先です.
    //! @retval true    ロードに成功.
    //! @retval false   ロードに失敗.
    //-------------------------------------------------------------------------
    bool Load(const char* path, ModelSMD& model);

    //-------------------------------------------------------------------------
    //! @brief      ディレクトリパスを取得します.
    //! 
    //! @return     ディレクトリパスを返却します.
    //-------------------------------------------------------------------------
    const std::string& GetDirectory() const
    { return m_DirectoryPath; }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::string     m_DirectoryPath;        //!< ディレクトリパス.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};