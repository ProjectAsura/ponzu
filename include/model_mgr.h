//-----------------------------------------------------------------------------
// File : model_mgr.h
// Desc : Model Manager.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <d3d12.h>
#include <fnd/asdxRef.h>
#include <gfx/asdxRayTracing.h>


namespace r3d {

static constexpr uint32_t INVALID_MATERIAL_MAP = UINT32_MAX;

///////////////////////////////////////////////////////////////////////////////
// Vertex structure
///////////////////////////////////////////////////////////////////////////////
struct Vertex
{
    asdx::Vector3   Position;
    asdx::Vector3   Normal;
    asdx::Vector3   Tangent;
    asdx::Vector2   TexCoord;
};

///////////////////////////////////////////////////////////////////////////////
// Mesh structure
///////////////////////////////////////////////////////////////////////////////
struct Mesh
{
    uint32_t        VertexCount;    //!< 頂点数です.
    uint32_t        IndexCount;     //!< インデックス数です.
    const Vertex*   Vertices;       //!< 頂点データです.
    const uint32_t* Indices;        //!< インデックスデータです.
};

///////////////////////////////////////////////////////////////////////////////
// Material structure
///////////////////////////////////////////////////////////////////////////////
struct Material
{
    uint32_t    BaseColor;  //!< ベースカラー.
    uint32_t    Normal;     //!< 法線マップ.
    uint32_t    ORM;        //!< オクルージョン/ラフネス/メタリック.
    uint32_t    Emissive;   //!< エミッシブ.
};

///////////////////////////////////////////////////////////////////////////////
// GeometryHandle structure
///////////////////////////////////////////////////////////////////////////////
struct GeometryHandle
{
    D3D12_GPU_VIRTUAL_ADDRESS   AddressVB  = 0;    //!< 頂点バッファのGPU仮想アドレスです.
    D3D12_GPU_VIRTUAL_ADDRESS   AddressIB  = 0;    //!< インデックスバッファのGPU仮想アドレスです.
    uint32_t                    IndexVB    = 0;    //!< 頂点バッファのハンドルです.
    uint32_t                    IndexIB    = 0;    //!< インデックスバッファのハンドルです.
};

///////////////////////////////////////////////////////////////////////////////
// Instance structure
///////////////////////////////////////////////////////////////////////////////
struct Instance
{
    uint32_t        VertexBufferId; //!< 頂点バッファのハンドルです.
    uint32_t        IndexBufferId;  //!< インデックスバッファの
    uint32_t        MaterialId;     //!< マテリアルID.
};

///////////////////////////////////////////////////////////////////////////////
// InstanceHandle structure
///////////////////////////////////////////////////////////////////////////////
struct InstanceHandle
{
    uint32_t                    InstanceId; //!< インスタンスID.
    D3D12_GPU_VIRTUAL_ADDRESS   AddressTB;  //!< トランスフォームバッファのGPU仮想アドレスです.
};

///////////////////////////////////////////////////////////////////////////////
// ModelMgr class
///////////////////////////////////////////////////////////////////////////////
class ModelMgr
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタ
    //-------------------------------------------------------------------------
    ModelMgr() = default;

    //-------------------------------------------------------------------------
    //! @brief      デストラクタ.
    //-------------------------------------------------------------------------
    ~ModelMgr() = default;

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //! 
    //! @param[in]      maxInstanceCount    最大インスタンス数です.
    //! @param[in]      maxMaterialCount    最大マテリアル数です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(
        uint32_t maxInstanceCount,
        uint32_t maxMaterialCount);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを解除します.
    //-------------------------------------------------------------------------
    void Fixed();

    //-------------------------------------------------------------------------
    //! @brief      メッシュを登録します.
    //! 
    //! @param[in]      mesh        登録するメッシュ.
    //! @return     ジオメトリハンドルを返却します.
    //-------------------------------------------------------------------------
    GeometryHandle AddMesh(const Mesh& mesh);

    //-------------------------------------------------------------------------
    //! @brief      インスタンスを登録します.
    //! 
    //! @param[in]      instance        インスタンスデータ.
    //! @param[in]      transform       変換行列.
    //! @return     インスタンスハンドルを返却します.
    //-------------------------------------------------------------------------
    InstanceHandle AddInstance(const Instance& instance, const asdx::Transform3x4& transform);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを登録します.
    //! 
    //! @param[in]      ptr     マテリアルデータ.
    //! @param[in]      count   マテリアル数.
    //! @return     GPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS AddMaterials(const Material* ptr, uint32_t count);

    //-------------------------------------------------------------------------
    //! @brief      インスタンスバッファのシェーダリソースビューを取得します.
    //-------------------------------------------------------------------------
    asdx::IShaderResourceView* GetIB() const;

    //-------------------------------------------------------------------------
    //! @brief      トランスフォームバッファのシェーダリソースビューを取得します.
    //-------------------------------------------------------------------------
    asdx::IShaderResourceView* GetTB() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルバッファのシェーダリソースビューを取得します.
    //-------------------------------------------------------------------------
    asdx::IShaderResourceView* GetMB() const;

    //--------------------------------------------------------------------------
    //! @brief      インスタンスバッファのGPU仮想アドレスを取得します.
    //--------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetAddressIB() const;

    //--------------------------------------------------------------------------
    //! @brief      トランスフォームバッファのGPU仮想アドレスを取得します.
    //--------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetAddressTB() const;

    //--------------------------------------------------------------------------
    //! @brief      マテリアルバッファのGPU仮想アドレスを取得します.
    //--------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetAddressMB() const;

    //-------------------------------------------------------------------------
    //! @brief      インスタンスバッファサイズを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetSizeIB() const;

    //-------------------------------------------------------------------------
    //! @brief      トランスフォームバッファサイズを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetSizeTB() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルバッファサイズを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetSizeMB() const;

private:
    ///////////////////////////////////////////////////////////////////////////
    // MeshBuffer structure
    ///////////////////////////////////////////////////////////////////////////
    struct MeshBuffer
    {
        asdx::RefPtr<ID3D12Resource>            VB;
        asdx::RefPtr<ID3D12Resource>            IB;
        asdx::RefPtr<asdx::IShaderResourceView> VB_SRV;
        asdx::RefPtr<asdx::IShaderResourceView> IB_SRV;
    };

    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D12Resource>    m_IB;   //!< インスタンスバッファ.
    asdx::RefPtr<ID3D12Resource>    m_TB;   //!< トランスフォームバッファ.
    asdx::RefPtr<ID3D12Resource>    m_MB;   //!< マテリアルバッファ.

    asdx::RefPtr<asdx::IShaderResourceView> m_IB_SRV;
    asdx::RefPtr<asdx::IShaderResourceView> m_TB_SRV;
    asdx::RefPtr<asdx::IShaderResourceView> m_MB_SRV;

    std::vector<MeshBuffer>     m_Meshes;

    uint32_t    m_OffsetInstance = 0;
    uint32_t    m_OffsetMaterial = 0;

    uint32_t    m_MaxInstanceCount;
    uint32_t    m_MaxMaterialCount;

    Instance*               m_pInstances    = nullptr;
    asdx::Transform3x4*     m_pTransforms   = nullptr;
    Material*               m_pMaterials    = nullptr;

    D3D12_GPU_VIRTUAL_ADDRESS m_AddressIB = 0;
    D3D12_GPU_VIRTUAL_ADDRESS m_AddressTB = 0;
    D3D12_GPU_VIRTUAL_ADDRESS m_AddressMB = 0;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace r3d
