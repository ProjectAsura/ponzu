//-----------------------------------------------------------------------------
// File : model_mgr.h
// Desc : Model Manager.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <d3d12.h>
#include <fnd/asdxRef.h>
#include <gfx/asdxRayTracing.h>


namespace r3d {

///////////////////////////////////////////////////////////////////////////////
// Vertex structure
///////////////////////////////////////////////////////////////////////////////
struct Vertex
{
    asdx::Vector3   Position;
    asdx::Vector3   Normal;
    asdx::Vector3   Tangent;
    asdx::Vector2   TexCoord;
};

///////////////////////////////////////////////////////////////////////////////
// Material structure
///////////////////////////////////////////////////////////////////////////////
struct Material
{
    uint32_t    BaseColor;  //!< ベースカラー.
    uint32_t    Normal;     //!< 法線マップ.
    uint32_t    ORM;        //!< オクルージョン/ラフネス/メタリック.
};

///////////////////////////////////////////////////////////////////////////////
// ModelMgr class
///////////////////////////////////////////////////////////////////////////////
class ModelMgr
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタ
    //-------------------------------------------------------------------------
    ModelMgr() = default;

    //-------------------------------------------------------------------------
    //! @brief      デストラクタ.
    //-------------------------------------------------------------------------
    ~ModelMgr() = default;

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //! 
    //! @param[in]      maxVertexCount      最大頂点数.
    //! @param[in]      maxIndexCount       最大頂点インデックス数.
    //! @param[in]      maxTransformCount   最大トランスフォーム数.
    //! @param[in]      maxMaterialCount    最大マテリアル数.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(
        uint32_t maxVertexCount,
        uint32_t maxIndexCount,
        uint32_t maxTransformCount,
        uint32_t maxMaterialCount);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを解除します.
    //-------------------------------------------------------------------------
    void Fixed();

    //-------------------------------------------------------------------------
    //! @brief      頂点データを登録します.
    //! 
    //! @param[in]      ptr     頂点データ.
    //! @param[in]      count   頂点数.
    //! @return     GPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS AddVertices(const Vertex* ptr, uint32_t count);

    //-------------------------------------------------------------------------
    //! @brief      頂点インデックスを登録します.
    //! 
    //! @param[in]      ptr     頂点インデックス.
    //! @param[in]      count   頂点イデックス数.
    //! @return     GPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS AddInidices(const uint32_t* ptr, uint32_t count);

    //-------------------------------------------------------------------------
    //! @brief      トランスフォームを登録します.
    //! 
    //! @param[in]      ptr     トランフォームデータ.
    //! @param[in]      count   トランスフォーム数.
    //! @return     GPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS AddTransforms(const asdx::Transform3x4* ptr, uint32_t count);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを登録します.
    //! 
    //! @param[in]      ptr     マテリアルデータ.
    //! @param[in]      count   マテリアル数.
    //! @return     GPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS AddMaterials(const Material* ptr, uint32_t count);

    //-------------------------------------------------------------------------
    //! @brief      頂点バッファのシェーダリソースビューを取得します.
    //! 
    //! @return     頂点バッファのシェーダリソースビューを返却します.
    //-------------------------------------------------------------------------
    asdx::IShaderResourceView* GetVertexSRV() const;

    //-------------------------------------------------------------------------
    //! @brief      インデックスバッファのシェーダリソースビューを取得します.
    //! 
    //! @return     インデックスバッファのシェーダリソースビューを返却します.
    //-------------------------------------------------------------------------
    asdx::IShaderResourceView* GetIndexSRV() const;

    //-------------------------------------------------------------------------
    //! @brief      トランスフォームバッファのシェーダリソースビューを取得します.
    //! 
    //! @return     トランスフォームバッファのシェーダリソースビューを返却します.
    //-------------------------------------------------------------------------
    asdx::IShaderResourceView* GetTransformSRV() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルバッファのシェーダリソースビューを取得します.
    //! 
    //! @return     マテリアルバッファのシェーダリソースビューを返却します.
    //-------------------------------------------------------------------------
    asdx::IShaderResourceView* GetMaterialSRV() const;

    //--------------------------------------------------------------------------
    //! @brief      頂点バッファのGPU仮想アドレスを取得します.
    //--------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetAddressVB() const;

    //--------------------------------------------------------------------------
    //! @brief      インデックスバッファのGPU仮想アドレスを取得します.
    //--------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetAddressIB() const;

    //--------------------------------------------------------------------------
    //! @brief      トランスフォームバッファのGPU仮想アドレスを取得します.
    //--------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetAddressTB() const;

    //--------------------------------------------------------------------------
    //! @brief      マテリアルバッファのGPU仮想アドレスを取得します.
    //--------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetAddressMB() const;

    //-------------------------------------------------------------------------
    //! @brief      頂点バッファサイズを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetSizeVB() const;

    //-------------------------------------------------------------------------
    //! @brief      インデックスバッファサイズを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetSizeIB() const;

    //-------------------------------------------------------------------------
    //! @brief      トランスフォームバッファサイズを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetSizeTB() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルバッファサイズを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetSizeMB() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D12Resource>    m_VB;   //!< 頂点バッファ.
    asdx::RefPtr<ID3D12Resource>    m_IB;   //!< インデックスバッファ.
    asdx::RefPtr<ID3D12Resource>    m_TB;   //!< トランスフォームバッファ.
    asdx::RefPtr<ID3D12Resource>    m_MB;   //!< マテリアルバッファ.

    asdx::RefPtr<asdx::IShaderResourceView> m_VertexSRV;
    asdx::RefPtr<asdx::IShaderResourceView> m_IndexSRV;
    asdx::RefPtr<asdx::IShaderResourceView> m_TransformSRV;
    asdx::RefPtr<asdx::IShaderResourceView> m_MaterialSRV;

    uint32_t    m_OffsetVB = 0;
    uint32_t    m_OffsetIB = 0;
    uint32_t    m_OffsetTB = 0;
    uint32_t    m_OffsetMB = 0;

    uint32_t    m_MaxCountVB = 0;
    uint32_t    m_MaxCountIB = 0;
    uint32_t    m_MaxCountTB = 0;
    uint32_t    m_MaxCountMB = 0;

    Vertex*                 m_pVertices     = nullptr;
    uint32_t*               m_pIndices      = nullptr;
    asdx::Transform3x4*     m_pTransforms   = nullptr;
    Material*               m_pMaterials    = nullptr;

    D3D12_GPU_VIRTUAL_ADDRESS m_AddressVB = 0;
    D3D12_GPU_VIRTUAL_ADDRESS m_AddressIB = 0;
    D3D12_GPU_VIRTUAL_ADDRESS m_AddressTB = 0;
    D3D12_GPU_VIRTUAL_ADDRESS m_AddressMB = 0;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace r3d
