//-----------------------------------------------------------------------------
// File : OBJLoader.h
// Desc : Wavefront Alias OBJ format.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <vector>
#include <fnd/asdxMath.h>


///////////////////////////////////////////////////////////////////////////////
// SubsetOBJ structure
///////////////////////////////////////////////////////////////////////////////
struct SubsetOBJ
{
    std::string     MeshName;
    std::string     MaterialName;
    uint32_t        IndexStart;
    uint32_t        IndexCount;
};

///////////////////////////////////////////////////////////////////////////////
// IndexOBJ structure
///////////////////////////////////////////////////////////////////////////////
struct IndexOBJ
{
    uint32_t    P;      //!< 位置.
    uint32_t    T;      //!< テクスチャ座標.
    uint32_t    N;      //!< 法線.
};

///////////////////////////////////////////////////////////////////////////////
// MaterialOBJ structure
///////////////////////////////////////////////////////////////////////////////
struct MaterialOBJ
{
    std::string     Name;       //!< マテリアル名.
    asdx::Vector3   Ka;         //!< アンビエント.
    asdx::Vector3   Kd;         //!< ディフューズ.
    asdx::Vector3   Ks;         //!< スペキュラー.
    asdx::Vector3   Ke;         //!< エミッシブ.
    float           Tr;         //!< 透過度.
    float           Ns;         //!< シャイネス.
    std::string     map_Ka;     //!< アンビエントマップ.
    std::string     map_Kd;     //!< ディフューズマップ.
    std::string     map_Ks;     //!< スペキュラーマップ.
    std::string     map_Ke;     //!< エミッシブマップ.
    std::string     map_bump;   //!< バンプマップ.
    std::string     norm;       //!< 法線マップ.
    std::string     disp;       //!< ディスプレースメントマップ.
};

///////////////////////////////////////////////////////////////////////////////
// VertexOBJ structure
///////////////////////////////////////////////////////////////////////////////
struct VertexOBJ
{
    asdx::Vector3   Position;
    asdx::Vector3   Normal;
    asdx::Vector3   Tangent;
    asdx::Vector2   TexCoord;
};

///////////////////////////////////////////////////////////////////////////////
// MeshOBJ structure
///////////////////////////////////////////////////////////////////////////////
struct MeshOBJ
{
    std::string                 Name;
    std::string                 MaterialName;
    std::vector<VertexOBJ>      Vertices;
    std::vector<uint32_t>       Indices;
};

///////////////////////////////////////////////////////////////////////////////
// ModelOBJ structure
///////////////////////////////////////////////////////////////////////////////
struct ModelOBJ
{
    std::vector<MaterialOBJ>    Materials;
    std::vector<MeshOBJ>        Meshes;
};


///////////////////////////////////////////////////////////////////////////////
// OBJLoader class
///////////////////////////////////////////////////////////////////////////////
class OBJLoader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    OBJLoader() = default;

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~OBJLoader() = default;

    //-------------------------------------------------------------------------
    //! @brief      ファイルをロードします.
    //! 
    //! @param[in]      path        ファイルパスです.
    //! @param[out]     model       モデルの格納先です.
    //! @retval true    ロードに成功.
    //! @retval false   ロードに失敗.
    //-------------------------------------------------------------------------
    bool Load(const char* path, ModelOBJ& mesh);

    //-------------------------------------------------------------------------
    //! @brief      ディレクトリパスを取得します.
    //! 
    //! @return     ディレクトリパスを返却します.
    //-------------------------------------------------------------------------
    const std::string& GetDirectory() const
    { return m_DirectoryPath; }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::string m_DirectoryPath;    //!< ディレクトリパス.

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      OBJファイルをロードします.
    //! 
    //! @param[in]      path        OBJファイルパスです.
    //! @param[out]     model       モデルの格納先です.
    //! @param[out]     materials   マテリアルの格納先です.
    //! @retval true    ロードに成功.
    //! @retval false   ロードに失敗.
    //-------------------------------------------------------------------------
    bool LoadOBJ(const char* path, ModelOBJ& model);

    //-------------------------------------------------------------------------
    //! @brief      MTLファイルをロードします.
    //! 
    //! @param[in]      path        MTLファイルパスです.
    //! @param[out]     model       モデルの格納先です.
    //! @retval true    ロードに成功.
    //! @retval false   ロードに失敗.
    //-------------------------------------------------------------------------
    bool LoadMTL(const char* path, ModelOBJ& model);
};
