// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAMERA_R3D_H_
#define FLATBUFFERS_GENERATED_CAMERA_R3D_H_

#include "flatbuffers/flatbuffers.h"

namespace r3d {

struct Vector3;

struct ResCameraParam;

struct ResCameraSequence;
struct ResCameraSequenceBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ResCameraParam FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t frameIndex_;
  r3d::Vector3 position_;
  r3d::Vector3 target_;
  r3d::Vector3 upward_;
  float fieldOfView_;
  float nearClip_;
  float farClip_;

 public:
  ResCameraParam()
      : frameIndex_(0),
        position_(),
        target_(),
        upward_(),
        fieldOfView_(0),
        nearClip_(0),
        farClip_(0) {
  }
  ResCameraParam(uint32_t _frameIndex, const r3d::Vector3 &_position, const r3d::Vector3 &_target, const r3d::Vector3 &_upward, float _fieldOfView, float _nearClip, float _farClip)
      : frameIndex_(flatbuffers::EndianScalar(_frameIndex)),
        position_(_position),
        target_(_target),
        upward_(_upward),
        fieldOfView_(flatbuffers::EndianScalar(_fieldOfView)),
        nearClip_(flatbuffers::EndianScalar(_nearClip)),
        farClip_(flatbuffers::EndianScalar(_farClip)) {
  }
  uint32_t frameIndex() const {
    return flatbuffers::EndianScalar(frameIndex_);
  }
  const r3d::Vector3 &position() const {
    return position_;
  }
  const r3d::Vector3 &target() const {
    return target_;
  }
  const r3d::Vector3 &upward() const {
    return upward_;
  }
  float fieldOfView() const {
    return flatbuffers::EndianScalar(fieldOfView_);
  }
  float nearClip() const {
    return flatbuffers::EndianScalar(nearClip_);
  }
  float farClip() const {
    return flatbuffers::EndianScalar(farClip_);
  }
};
FLATBUFFERS_STRUCT_END(ResCameraParam, 52);

struct ResCameraSequence FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResCameraSequenceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARAMS = 4
  };
  const flatbuffers::Vector<const r3d::ResCameraParam *> *params() const {
    return GetPointer<const flatbuffers::Vector<const r3d::ResCameraParam *> *>(VT_PARAMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARAMS) &&
           verifier.VerifyVector(params()) &&
           verifier.EndTable();
  }
};

struct ResCameraSequenceBuilder {
  typedef ResCameraSequence Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_params(flatbuffers::Offset<flatbuffers::Vector<const r3d::ResCameraParam *>> params) {
    fbb_.AddOffset(ResCameraSequence::VT_PARAMS, params);
  }
  explicit ResCameraSequenceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ResCameraSequence> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResCameraSequence>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResCameraSequence> CreateResCameraSequence(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const r3d::ResCameraParam *>> params = 0) {
  ResCameraSequenceBuilder builder_(_fbb);
  builder_.add_params(params);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResCameraSequence> CreateResCameraSequenceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<r3d::ResCameraParam> *params = nullptr) {
  auto params__ = params ? _fbb.CreateVectorOfStructs<r3d::ResCameraParam>(*params) : 0;
  return r3d::CreateResCameraSequence(
      _fbb,
      params__);
}

inline const r3d::ResCameraSequence *GetResCameraSequence(const void *buf) {
  return flatbuffers::GetRoot<r3d::ResCameraSequence>(buf);
}

inline const r3d::ResCameraSequence *GetSizePrefixedResCameraSequence(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<r3d::ResCameraSequence>(buf);
}

inline bool VerifyResCameraSequenceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<r3d::ResCameraSequence>(nullptr);
}

inline bool VerifySizePrefixedResCameraSequenceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<r3d::ResCameraSequence>(nullptr);
}

inline void FinishResCameraSequenceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<r3d::ResCameraSequence> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResCameraSequenceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<r3d::ResCameraSequence> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace r3d

#endif  // FLATBUFFERS_GENERATED_CAMERA_R3D_H_
